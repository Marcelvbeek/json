{"version":3,"sources":["../../server/controllers/questionController.js"],"names":["questionController","req","res","questionModel","findOne","body","id","err","foundQuestion","ref","answers","find","answer","answerId","found","json","params","Object","assign","save","updatedQuestion","handleError","send","result","forEach","question","title"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEMA,kB;AACF,kCAAc;AAAA;AAEb;;;;+BAEMC,G,EAAKC,G,EAAK;AACb,4BAAOC,aAAP,CAAqBC,OAArB,CAA6B,EAAC,MAAMH,IAAII,IAAJ,CAASC,EAAhB,EAA7B,EAAkD,UAACC,GAAD,EAAMC,aAAN,EAAwB;AACtE,oBAAMC,MAAMD,cAAcE,OAAd,CAAsBC,IAAtB,CAA2B,kBAAU;AAC7C,wBAAGC,OAAON,EAAP,IAAaL,IAAII,IAAJ,CAASQ,QAAzB,EAAmC;AAC/B,+BAAO,IAAP;AACH;AACJ,iBAJW,CAAZ;AAKA,gCAAOV,aAAP,CAAqBC,OAArB,CAA6B,EAAC,MAAMK,IAAIA,GAAX,EAA7B,EAA8C,UAACF,GAAD,EAAMO,KAAN,EAAgB;AAC1D,2BAAOZ,IAAIa,IAAJ,CAASD,KAAT,CAAP;AACH,iBAFD;AAGH,aATD;AAUH;;;+BAEMb,G,EAAKC,G,EAAK;AACb,4BAAOC,aAAP,CAAqBC,OAArB,CAA6B,EAAC,MAAMH,IAAIe,MAAJ,CAAWV,EAAlB,EAA7B,EAAoD,UAACC,GAAD,EAAMC,aAAN,EAAwB;AACxE,uBAAON,IAAIa,IAAJ,CAASP,aAAT,CAAP;AACH,aAFD;AAGH;;;6BAEIP,G,EAAKC,G,EAAK;AACX,4BAAOC,aAAP,CAAqBC,OAArB,CAA6B,EAAC,MAAMH,IAAIe,MAAJ,CAAWV,EAAlB,EAA7B,EAAoD,UAACC,GAAD,EAAMC,aAAN,EAAwB;AACxEA,gCAAgBS,OAAOC,MAAP,CAAcV,aAAd,EAA6BP,IAAII,IAAjC,CAAhB;;AAEAG,8BAAcW,IAAd,CAAmB,UAAUZ,GAAV,EAAea,eAAf,EAAgC;AAC/C,wBAAIb,GAAJ,EAAS,OAAOc,YAAYd,GAAZ,CAAP;AACTL,wBAAIoB,IAAJ,CAASF,eAAT;AACH,iBAHD;AAIH,aAPD;AAQH;;;+BAEMnB,G,EAAKC,G,EAAK;AACb,4BAAOC,aAAP,CAAqBQ,IAArB,CAA0B,UAACJ,GAAD,EAAMgB,MAAN,EAAiB;AACvC,uBAAOrB,IAAIa,IAAJ,CAASQ,MAAT,CAAP;AACH,aAFD;AAGH;;;+BAEMtB,G,EAAKC,G,EAAK;AACbD,gBAAII,IAAJ,CAASmB,OAAT,CAAiB,oBAAY;AACzB,oBAAIC,WAAW,IAAI,gBAAOtB,aAAX,CAAyB;AACpCG,wBAAImB,SAASnB,EADuB;AAEpCoB,2BAAOD,SAASC,KAFoB;AAGpChB,6BAASe,SAASf;AAHkB,iBAAzB,CAAf;;AAMAe,yBAASN,IAAT;AACH,aARD;AASA,mBAAOjB,IAAIa,IAAJ,CAAS,oBAAT,CAAP;AACH;;;;;;kBAIUf,kB","file":"questionController.js","sourcesContent":["import models from '../database/index'\n\nclass questionController {\n    constructor() {\n\n    }\n\n    getRef(req, res) {\n        models.questionModel.findOne({'id': req.body.id}, (err, foundQuestion) => {\n            const ref = foundQuestion.answers.find(answer => {\n                if(answer.id == req.body.answerId) {\n                    return true\n                }\n            })\n            models.questionModel.findOne({'id': ref.ref}, (err, found) => {\n                return res.json(found); \n            });\n        })\n    }\n\n    getOne(req, res) {\n        models.questionModel.findOne({'id': req.params.id}, (err, foundQuestion) => {\n            return res.json(foundQuestion); \n        })\n    }\n\n    edit(req, res) {\n        models.questionModel.findOne({'id': req.params.id}, (err, foundQuestion) => {\n            foundQuestion = Object.assign(foundQuestion, req.body);\n\n            foundQuestion.save(function (err, updatedQuestion) {\n                if (err) return handleError(err);\n                res.send(updatedQuestion);\n            });\n        })\n    }\n\n    getAll(req, res) {\n        models.questionModel.find((err, result) => {\n            return res.json(result)\n        })\n    }\n\n    addNew(req, res) {\n        req.body.forEach(question => {\n            var question = new models.questionModel({\n                id: question.id,\n                title: question.title,\n                answers: question.answers\n            })\n\n            question.save();\n        })\n        return res.json('succesfull updated');\n    }\n    \n}\n\nexport default questionController"]}